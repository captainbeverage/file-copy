Note: All questions need to be solved in assigned groups. For this assignment, you are required to
program in C/C++ on a Unix/Linux/MacOSX platform. One option is for you to set up Virtualbox (which
is free for anyone to download) on your personal computers and use the Linux VM that has been shared on
google drive. Alternatively, you may use the online Linux VM available through koding.com. Only your .cpp file
must be submitted via Moodle and only one student in each group must submit the actual file.
The purpose of this assignment is to get more familiar with file operations. For the most part, you will be using
the same system calls that you used for the most recent in-class exercise. If the information in the lecture notes is
insufficient, a good resource for Unix system calls can be found at http://bama.ua.edu/cgi-bin/man-cgi?intro+2.
To reduce the number of search results, search for the name of the system call followed by an open parenthesis.
(25 points) Write a program called copy_program that performs a file copy operation. The
steps involved are as follows.
1. Accept two input strings from the user, one identifying the source file and one identifying
the destination file. For each file, the user must provide the path (either absolute path
starting from the root directory or a relative path starting from the current working
directory in which your program runs) and the actual file name. Assume that directory/file
names cannot have spaces in them.
2. Open the source file in read mode. If the file cannot be opened for reading, display an
error message.
3. Open the destination file in write mode, with the option of creating a new file if a file of the
given name does not exist (using the O_CREAT flag). Since the creation option is used, it
is necessary to specify the access permissions or mode for the file as a third parameter to
the open system call. Assume that read and write permissions must be set for all classes of
users. If the file cannot be opened for writing, display an error message.
4. Read data from the source file and write the data into the destination file. The read and
write operations must be performed in blocks of size 512 bytes (i.e., your buffer must be
large enough to accommodate 512 bytes) until the entire source file has been copied to the
destination file.
5. Close both files.
To check whether your program works correctly, you may compare the results of your
program with the results of a regular copy command (cp) on Unix. 